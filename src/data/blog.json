{"vim-latexsuite_and_mupdf":{"title":"Vim-LaTeXsuite and Mupdf","body":"<h1>Using muPDF with Vim-LaTeXSuite</h1>\n<p>I thought to start off this new blog I would share a small tip I recently discovered\nfor editing LaTeX files on Linux systems using Vim, in particular I'm running Arch Linux.</p>\n<p>I'm a big fan of both Vim and LaTeX, so, naturally, I like to write my\n.tex files using Vim. The <a href=\"http://vim-latex.sourceforge.net/\">Vim-LaTeX suite</a> is\na great piece of software to add some macros and handy shortcuts to make this easier.</p>\n<p>I also like to use <a href=\"http://mupdf.com/\">muPDF</a> to read PDFs and view images on my machine,\nit's a simple GUI-free application that is fast and has vim-like keybindings. I often\nfound myself hitting <code>ctrl-z</code> and running:</p>\n<pre><code class=\"language-bash\">$ mupdf myLaTeXProject.pdf &amp;\n</code></pre>\n<p>but I recently discovered that by adding the following to your <code>.vimrc</code>:</p>\n<pre><code><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:Tex_DefaultTargetFormat</span>=<span class=\"hljs-string\">'pdf'</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:Tex_Flavor</span>=<span class=\"hljs-string\">'latex'</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:Tex_ViewRule_pdf</span>=<span class=\"hljs-string\">'mupdf'</span>\n</code></pre>\n<p>we can automate this process! Now when we hit <code>&lt;Leader&gt;ll</code> the <code>.tex</code> file currently\nopened will be automatically compiled to pdf, and by hitting <code>&lt;Leader&gt;lv</code> we can open\nthe pdf in muPDF! Nice!</p>\n","date":"2014-10-17T16:56:14.000Z"},"migrating_arch_linux_install_to_an_ssd":{"title":"Migrating Arch Linux install to an SSD","body":"<h1>Migrating an Arch Linux install</h1>\n<p>Today I got a new 60GB mSATA ssd in the mail and set about migrating\nmy root partition from the HDD on which it resided to the new shiny\nSSD. This turned out to be a little more complicated than I thought it\nshould be!</p>\n<p>First off, my initial partition layout looked like this, on a 320GB HDD:</p>\n<pre><code><span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-string\">sda1:</span> /, <span class=\"hljs-number\">30</span>G\n<span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-string\">sda2:</span> swap, <span class=\"hljs-number\">8</span>G\n<span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-string\">sda3:</span> /home, <span class=\"hljs-number\">260</span>G\n</code></pre>\n<p>We'll be adding a new device, sdb, and what we want, ultimately, is:</p>\n<pre><code><span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-string\">sdb1:</span> /, <span class=\"hljs-number\">30</span>G\n<span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-string\">sdb2:</span> <span class=\"hljs-regexp\">/home/</span>user/fast_home, <span class=\"hljs-number\">28</span>G\n<span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-string\">sda1:</span> swap, <span class=\"hljs-number\">8</span>G\n<span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-string\">sda2:</span> /home. <span class=\"hljs-number\">290</span>G\n</code></pre>\n<p>Right! So the first thing we want to do is create a new partition table and\na partition on sdb. I'm using GUID for my partition table, and I'll be sticking\nwith a basic ext4 filesystem. We can do this with either something like gparted\nor with a console tool like gdisk, but the result will be the same either way.</p>\n<p>Once we have a partition on <code>/dev/sdb1</code> formatted to <code>ext4</code> we want to use GParted\nto make sure the the <code>legacy_boot</code> flag is set for the partition. That's all we'll\nneed to do for partitioning! Now on to copying files.</p>\n<p>We can use dd to copy over everything in the root directory (except for stuff we\ndon't want) pretty easily. With the <code>/dev/sdb1</code> partition unmounted we do:</p>\n<pre><code class=\"language-bash\">sudo dd <span class=\"hljs-keyword\">if</span>=/dev/sda1 of=/dev/sdb1\n</code></pre>\n<p>This will take a good bit of time, depending on how much stuff you have. I had around\n15G in / and it took about 5 minutes.</p>\n<p>When it's done, we need to do a couple of things to make <code>/dev/sdb1</code> into a bonafide,\nbootable partition. We'll start by editing <code>/etc/fstab</code>, which tells Arch which\npartitions to mount where. Start by mounting the partition:</p>\n<pre><code class=\"language-bash\">sudo mount /dev/sdb1 /mnt\n</code></pre>\n<p>(create /mnt if you don't have it already) and then open <code>fstab</code> in your favorite text\neditor:</p>\n<pre><code class=\"language-bash\">sudo vim /mnt/etc/fstab\n</code></pre>\n<p>We can find the UUIDs of all partitions on our system\nby running:</p>\n<pre><code class=\"language-bash\">lsblk -o NAME,UUID\n</code></pre>\n<p>you should get something like</p>\n<pre><code class=\"language-bash\">NAME   UUID\nsda    \n├─sda1 15027501<span class=\"hljs-_\">-e</span>241-4b6c-b04d-02f27e3ee55e\n├─sda2 c5fcc964-af01-41e3<span class=\"hljs-_\">-a</span>9ef-489f8e4e2829\n└─sda3 c96a3307-3a8b-4f1f<span class=\"hljs-_\">-a</span>52a-baeda4cf27c0\nsdb    \n└─sdb1 15027501<span class=\"hljs-_\">-e</span>241-4b6c-b04d-02f27e3ee55e\nsr0    \n</code></pre>\n<p>wait, <code>/dev/sda1</code> and <code>/dev/sdb1</code> share the same UUID! ehhhh? This gets copied over when\nwe use <code>dd</code> to clone <code>/dev/sda1</code>. Never fear though, we can run:</p>\n<pre><code class=\"language-bash\">sudo tune2fs -U random /dev/sdb1\n</code></pre>\n<p>Which we'll give us a new UUID for <code>/dev/sdb1</code>.\nNow we'll change the first line of <code>/etc/fstab</code>, which should\nbe currently for <code>/dev/sda1</code>, to point\nto <code>/dev/sdb1</code> instead, by just changing out the UUID. Make sure that the <code>&lt;type&gt;</code>\noption matches the filesystem you used, and that you add the <code>discard</code> option to\nactivate TRIM (for SSD health and speed!). Once we've done all that we can <code>:wq</code> and\nmove on to editing our bootloader!</p>\n<p>I use syslinux on my machine, so I'm not sure what to do here if you use GRUB or something\nelse. For syslinux we need to do a couple things. First we:</p>\n<pre><code class=\"language-bash\">sudo vim /mnt/boot/syslinux/syslinux.cfg\n</code></pre>\n<p>and we search for <code>LABEL arch</code>. After <code>APPEND</code> you should see:</p>\n<pre><code><span class=\"hljs-attr\">root</span>=/dev/sda1\n</code></pre>\n<p>which we just change to <code>/dev/sdb1</code>. Next we need to install syslinux to the MBR of\n<code>/dev/sdb</code>. First off, lets check that we set the bootable flag by running:</p>\n<pre><code class=\"language-bash\">sudo sgdisk /dev/sdb --attributes=1:show\n</code></pre>\n<p>you should see something saying <code>legacy BIOS bootable</code>. If we're all good here we can\nrun:</p>\n<pre><code>sudo dd bs=440 conv=notrunc count=1 if=/usr/lib/syslinux/bios/gptmbr.bin of=/dev/sdb\n</code></pre>\n<p>To copy the syslinux MBR to <code>/dev/sdb</code>. Nice! The system should now be bootable from the\nSSD, and you should totes go test it now!</p>\n<p>Alright, so if that all worked, then all you have left is to enjoy the speed of your new rig!\nWell, I mean, you should probably delete your old / and swap, make a new swap at the beginning\nof <code>/dev/sda</code>, and increase the size of your home partition, but I leave that to you.</p>\n","date":"2014-10-22T17:44:56.000Z"},"email_signatures_in_sup":{"title":"Email signatures in Sup","body":"<h1>Email signatures in Sup</h1>\n<p>I'm a big fan of the <a href=\"http://supmua.org/\">Sup</a> email client. I've been\nusing it for around a year now, and I only just recently realized I didn't\nhave my email signatures properly configured! I had a little trouble\ngetting it to work correctly so I thought I would outline the process\nhere.</p>\n<p>Sup provides a handy way to write a script to handle attaching signatures\nto messages. In my case I use three different email addresses to send mail\non my machine, so I wanted to have the signature change depending on which\naddress was in the 'from' field (so as to adjust to different levels of\nformality, etc).</p>\n<p>This is pretty easy to do! This is what my <code>signature.rb</code> file looks like:</p>\n<pre><code class=\"language-ruby\"><span class=\"hljs-keyword\">if</span> from_email == <span class=\"hljs-string\">'alice.writes.wrongs@gmail.com'</span>\n    <span class=\"hljs-string\">\"~*~ alice ~*~\nPGP fingerprint: 43D1 4BEF 39F7 4027 B02A DC4D 3D47 670F 4226 9A83\"</span>\n<span class=\"hljs-keyword\">elsif</span> from_email == <span class=\"hljs-string\">'axyridis@riseup.net'</span>\n    <span class=\"hljs-string\">\"~*~ alice ~*~\nPGP fingerprint: 43D1 4BEF 39F7 4027 B02A DC4D 3D47 670F 4226 9A83\"</span>\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-string\">\"~*~ alice ~*~\"</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>which handles it pretty nicely! I've also set mine up the include the PGP\nkey that is relevant to the particular email address in question.</p>\n<p>Happy supping!</p>\n","date":"2015-05-05T16:41:50.000Z"},"switching_from_offlineimap_to_getmail":{"title":"Switching from Offlineimap to Getmail","body":"<p>So I've been happily using Offlineimap to get local copies (in Maildirs) of all\nmy email for a while. Somehow I managed to miss the fact that offlineimap is\nactually a <em>synchronization</em> program, so if, for instance, your email provider\naccidentally loses a quarter of your emails, offlineimap will happily delete\nthem from your maildir. In my mind this defeats the purpose of having a local\ncopy of mail at all, but I digress.</p>\n<p>As soon as I realized (belatedly) upon deleting some mail from my\n<a href=\"www.riseup.net\">Riseup</a> account to free up space that emails were\ndisappearing  from my Sup index (nothing too important, thankfully)\nI decided to kick offlineimap to the curb and seek a suitable replacement.</p>\n<p>##Enter Getmail</p>\n<p><a href=\"http://pyropus.ca/software/getmail/\">Getmail</a> was written as\na replacement for the aged Fetchmail program. It's got the capability to\ndownload mail using a bunch of different protocols, but I'm going to be\nusing plain ol' much maligned POP3. Here's how to set up Getmail to fetch\nemails from a Gmail account.</p>\n<p>##Initial Configuration</p>\n<p>First do:</p>\n<pre><code>{% highlight bash %}\nmkdir ~/.getmail\n{% endhighlight %}\n</code></pre>\n<p>Which is where we'll store configuration files for each inbox. These look\nlike this (for a Gmail account, other providers will be slightly\ndifferent):</p>\n<pre><code>[retriever]\ntype = SimplePOP3SSLRetriever\nserver = pop.gmail.com\nusername = username@gmail.com\nport = 995\npassword = mypassword111\n\n[destination]\ntype = Maildir\npath = ~/mail/gmail\n\n[options]\nread_all = False\n</code></pre>\n<p>I called each config file something like <code>alice_gmail</code>, something\ndescriptive that will be clear later. This will tell Getmail to import all\nmail that is downloaded into\na <a href=\"https://en.wikipedia.org/wiki/Maildir\">Maildir</a>, which is a pretty\ncommon format for storing emails (Sup, for instance, can just be pointed\nat a maildir). I have the maildirs for all my accounts (there are four of\nthem, don't ask me why) in <code>~/mail</code>, with subdirectories for each account.</p>\n<p>Note: if you're only downloading one mail account (lucky you!) you can\nname your config file <code>getmailrc</code>, and your subsequent configuration can\nignore what I've written about facilitating multiple accounts (getmail\nwill automatically read it's options from any file in <code>.getmail</code> named\n<code>getmailrc</code>).</p>\n<p><code>read_all = False</code> makes email downloading faster, by allowing Getmail to\nremember which mails it has already downloaded (it writes a file to\n~/.getmail for each account).</p>\n<p>##Multiple Accounts craziness</p>\n<p>OK so while getmail <em>does</em> support multiple accounts it's not the most\nintuitive thing. As I said above, we need to write a configuration file\nfor each mail account we want to download from, and we then need to call\ngetmail with all of these config files as arguments. What I did to make\nthis easier was write a little shell script, <code>mygetmail.sh</code>:</p>\n<pre><code>getmail --rcfile alice_gmail --rcfile other_gmail --rcfile\nhampshire_mail --rcfile riseup_mail\n</code></pre>\n<p>Where each argument to <code>--rcfile</code> is a configuration file written\nfollowing the example above. Nice! Then I just wrote a symbolic link:</p>\n<pre><code>chmod +x mygetmail.sh\nln -s ~/path/to/mygetmail.sh /usr/bin/mygetmail\n</code></pre>\n<p>Sweet! Then we can execute that to download mail from all the accounts\nwe're working with. If these aren't new accounts and you're downloading 50k\nor so emails this may take a while, so let it run (check that it's saving\nthem in the right place!) and go make a cup of coffee or tea.</p>\n<p>##Cron!</p>\n<p>So we've downloaded all of our email and we're up-to-date. Good stuff, but\nhow do we keep it up? Now that we've written our handy <code>mygetmail.sh</code> we\ncan set up a Cron job that will run that every so often (well, as often as\nwe'd like).</p>\n<p>On Arch Linux you'll need to install a package to get Cron, I'm using\n<a href=\"https://www.archlinux.org/packages/core/x86_64/cronie/\">Cronie</a> with no\nissues.</p>\n<p>If you've got it installed just do</p>\n<pre><code>crontab -e\n</code></pre>\n<p>and your <code>$EDITOR</code> will open the file you need to edit. If you just\ninstalled Cron there's probably nothing in there. Lets add the following\nline:</p>\n<pre><code>*/2 * * * * /usr/bin/mygetmail\n</code></pre>\n<p>Great! This specifies that the job will run every two minutes. If you\ndon't care about getting mail that often you can change it to run every\n10, or whatever you'd like.</p>\n<p>One last thing: although we've added the Cron job, it doesn't mean that\nCron is running yet. For Cronie you need to enable a systemd service:</p>\n<pre><code>sudo systemctl enable cronie.service\nsudo systemctl start cronie.service\n</code></pre>\n<p>And that should be it! Now that you've got all that email saved in lovely\nstraightforward Maildirs consider pointing <a href=\"www.supmua.org\">Sup</a> at it!</p>\n","date":"2015-05-06T14:36:31.000Z"},"complete_screenlocking_solution_for_i3":{"title":"Complete screenlocking solution for i3","body":"<h1>Complete screenlocking solution for i3</h1>\n<p>I've been using <a href=\"https://i3wm.org\">i3</a> for a while now, and while I'm\na complete tiling window manager convert, I've had trouble with a couple\nsmall things which are mostly 'automatic' on heavier desktop environments.</p>\n<p>One of those is screenlocking. If you use Gnome, for instance, you get\na nice screenlocker that is reasonable secure (can't switch to a tty, for\ninstance), and lets you switch accounts, etc. While my user account is the\nonly one on my machine, I wanted to have a complete solution for keeping\nmy laptop secure.</p>\n<h2>i3lock</h2>\n<p>Thankfully, i3 ships with a utility called i3lock, which is what it sounds\nlike (a lightweight screenlocker to use with i3). Basically you just call:</p>\n<pre><code>i3lock\n</code></pre>\n<p>To lock the screen with default options (a white background). I wanted\nsomething a little fancier, so I use this shellscript (i3lock.sh) instead:</p>\n<pre><code>#!/bin/bash\nscrot /tmp/screen.png\nconvert /tmp/screen.png -scale 10% -scale 1000% /tmp/screen.png\ni3lock -d -i /tmp/screen.png\n</code></pre>\n<p>I found this on either reddit or Github, but I can't remember where! If\nI did I would give credit to the original author. Essentially what this\ndoes is take a screen shot, shrink it down to 10% of the original size,\nand then blow that back up to the original size. Here's what this looks\nlike:</p>\n<p><img src=\"/images/i3lockscreenbefore.png\" alt=\"Before conversion\"></p>\n<p><img src=\"/images/i3lockscreenafter.png\" alt=\"After conversion\"></p>\n<p>I think this is pretty slick! It's really fast, and the unlock effect of\nthe pixelated image giving way to your desktop is pretty nice (I'm not\ntired of it yet, anyway!).</p>\n<h2>Activating i3lock</h2>\n<p>OK, so if we've got a nice little shellscript written, how do we actually\nlock the screen? I do it three different ways to cover all my bases.</p>\n<h3>Key combo</h3>\n<p>In my <code>i3config</code>:</p>\n<pre><code>bindsym $mod+ctrl+Shift+l exec i3lock.sh\n</code></pre>\n<p>Note that the directory in which my shellscripts are saved is in my $PATH,\nso this works. I like having a key command because sometimes if I'm\ngetting up from my desk I'd like to lock the screen, but I don't\nnecessarily want to suspend the machine.</p>\n<h3>Xautolock</h3>\n<p>Sometimes, though, I do a bad thing and walk away from my open, running\nlaptop. Oh no, anyone can get in!</p>\n<p>In order to have the screen lock automatically after 10 minutes of\ninactivity (even if the computer hasn't gone to sleep or had the lid\nclosed) I use\n<a href=\"https://www.archlinux.org/packages/community/x86_64/xautolock/\">xautolock</a>,\nwith the following in my .xinitrc:</p>\n<pre><code class=\"language-bash\">xautolock -time 10 -locker <span class=\"hljs-string\">\"i3lock.sh\"</span> &amp;\n</code></pre>\n<p>I also do:</p>\n<pre><code class=\"language-bash\">xset dpms 300 600 0 &amp;\n</code></pre>\n<p>So the computer is set to blank the screen after 5 minutes (the 300 is in\nseconds) and then lock after 10 minutes.</p>\n<h3>Systemd service</h3>\n<p>So that covers two ways of starting the locker, but I'd also like to make\nsure that the screen is locked anytime I close the lid or suspend the\ncomputer. To do that we can write a new systemd service, like so:</p>\n<pre><code>[Unit]\nDescription=i3lock\nBefore=sleep.target\n\n[Service]\nUser=alice\nType=forking\nEnvironment=DISPLAY=:0\nExecStart=/home/alice/Code/shellscripts/i3lock.sh\n\n[Install]\nWantedBy=sleep.target\n</code></pre>\n<p>Then we just do:</p>\n<pre><code>sudo systemctl enable i3lock.service\nsudo systemctl start i3lock.service\n</code></pre>\n<p>And we should be good! Now our screen will lock anytime we press the key\ncombo, leave the computer on for 10 minutes, or close the lid. Great!</p>\n","date":"2015-05-14T16:50:41.000Z"},"i_made_a_zine_about_gpg":{"title":"I made a zine about GPG","body":"<p>I made a zine! It teaches the reader how to install Thunderbird and\nEnigmail, and how to use them to send encrypted emails.</p>\n<p>I learned a fair amount in the process, mainly about how frustrating\ngraphics programs and printing can be. Turns out laser printers can't\naddress the outer 1/4 inch or so of the page, which is kind of a bummer if\nyou designed your zine to print to the edges...ah well.</p>\n<p>Anyway, if you'd like to download a copy or fiddle with any of the\nintermediate files I put everything on Github\n<a href=\"https://github.com/aliceriot/PocketGuide\">here</a>.</p>\n","date":"2015-05-19T13:26:54.000Z"},"first_night_in_nyc":{"title":"First night in NYC","body":"<p>I'm super super excited because tomorrow I'm going to start my batch at\nthe <a href=\"https://www.recurse.com\">Recurse Center</a>! My bus got in today around\nnoon, and after many difficulties with the subway (and all the stuff I was\ntoting) I checked in to my airbnb place around 3pm.</p>\n<p>All I've done so far is take a quick bike ride around (Prospect Park is\ngorgeous!) and get some groceries. Tomorrow morning I'll ride across the\nbridge into Manhattan for the first time!</p>\n<p>I'm putting this up online because hopefully it will make me more\naccountable: I'm going to try to post every day after finishing up at RC,\nas a recap of what I worked on and got done that day. Hopefully this will\nbe a motivational exercise! We'll see if I stick with it.</p>\n<p>Yay!</p>\n","date":"2015-05-26T01:08:33.000Z"},"first_day_at_rc":{"title":"First day at RC","body":"<p>Today was my first day at the Recurse Center! What did I get up to? Well:</p>\n<ul>\n<li>I wrote a kernel module (hello.c) which prints 'Hello World!' to\nKERN_DEBUG (you can read it with dmesg). I did this for the first\nexercise in the <a href=\"http://eudyptula-challenge.org/\">Eudyptula Challenge</a>.\nI've been having trouble getting the automated scripts to accept my\nMakefile though, it compiles fine (I can load the module on my laptop\nand it works as expected) but I'm not hitting whatever the script is\nlooking for. I'm going to poke at this more tomorrow.</li>\n<li>I started the <a href=\"http://cryptopals.com/\">Matasano Cryptography Challenge</a>!\nThis is sort of a similar thing to the above (I like solving\nproblemsets, I guess?) but focused on cryptography. I started working on\nthe first problem, which is to convert hex to Base64. Fun! I'm going to\nbe working in C for this.</li>\n<li>I played Catan! I'm not very good at Catan.</li>\n</ul>\n<p>It was a great first day! I rode in from Brooklyn in the morning, and\nalthough I crossed the wrong bridge (I meant to do the Brooklyn and\nsomehow wound up crossing the Manhattan, even with a smartphone) it went\nvery smoothly. I think NY is actually a better place to ride a bike than\nBoston.</p>\n<p>Looking forward to tomorrow!</p>\n","date":"2015-05-27T03:02:30.000Z"},"rc_day_2_haskell_and_git_stuff":{"title":"RC, day 2! Haskell and Git stuff","body":"<p>I had a great second day at RC! I'm just going to give a quick summary of what I did:</p>\n<ul>\n<li>I did an intro to Haskell workshop, which inspired me to pick up <a href=\"http://book.realworldhaskell.org/\">Real\nWorld Haskell</a> again. Luckily,\nthere's a paper copy here! Apparently when I was doing it before I read\nup to the end of chapter 3. Nice!</li>\n<li>I started working on a Git commit tree visualizer. Basically I did some\nplanning and thinking, and I wrote a couple of useful functions to\ninteract with a Git repo. Fun!</li>\n<li>I also read some more of K&amp;R, and solved some exercises for that book.</li>\n</ul>\n<p>All in all, a pretty good day! I had to leave a little early to go look at\nan apartment, so I didn't get as much done as I would have liked.</p>\n","date":"2015-05-28T03:10:03.000Z"},"rc_day_3":{"title":"RC day 3","body":"<p>What did I do today? Mainly I worked on the gitViz project I've started.\nI have several of the functions I need for it to function working. I'm\nunderstanding more and more why people don't use C for string processing!</p>\n<p>I also made some progress on the CryptoPals stuff, read some more K&amp;R, and\nfinished chapter 3 in Real World Haskell.</p>\n","date":"2015-05-29T18:31:59.000Z"},"a_sampling_of_my_lacking_photography_skills":{"title":"A sampling of my (lacking) photography skills","body":"<h1>A sampling of my (lacking) photography skills</h1>\n<p>I've been in New York now for about a week, and I've been taking a bunch\nof pictures to send over TextSecure to folks in Boston. Here are some\nhighlights:</p>\n<h3>Bloomberg Tower</h3>\n<p>I went to a talk about GnuPG last night that was in the Bloomberg Tower.\nI thought it was a bit strange to hold an event about a piece of\ntechnology that enables secure communication and privacy in a building which\nrequires a government issued photo ID to enter. They also take your photograph\nat the desk and issue you a badge (which you have to wear at all times). No one\nelse seemed bothered by this? Maybe this is just how all big towers are here?\nThey did have lots of snacks.</p>\n<p>Anyway, it's a tall building and we could see central park:</p>\n<p><img src=\"/images/nyc_pictures/bloombergtower.jpg\" alt=\"Bloomberg View\"></p>\n<h3>Brooklyn Botanical Garden</h3>\n<p>Today I visited the Brooklyn Botanical Garden, which was a really awesome\nplace. Lots of really nice landscaping!</p>\n<p><img src=\"/images/nyc_pictures/fountain.jpg\" alt=\"Fountain thing\"></p>\n<p>Gross water though! This was kind of a theme:</p>\n<p><img src=\"/images/nyc_pictures/grosspond.jpg\" alt=\"Nasty pond\"></p>\n<p>They have a nice bonsai room, including this beautiful dead one:</p>\n<p><img src=\"/images/nyc_pictures/deadbonsai.jpg\" alt=\"Dead\"></p>\n<p>and this one planted in moss!</p>\n<p><img src=\"/images/nyc_pictures/mossbonsai.jpg\" alt=\"Moss\"></p>\n<p>and this one growing over a rock:</p>\n<p><img src=\"/images/nyc_pictures/brickbonsai.jpg\" alt=\"Rock\"></p>\n<p>Cool stuff!</p>\n<p>Going along with the bonsai theme, they have a Japanese style garden, with\na Shinto gate, small shrine, and another gross looking pond (this one with\nfish!):</p>\n<p><img src=\"/images/nyc_pictures/gate.jpg\" alt=\"Gate\"></p>\n<p>Fish!</p>\n<p><img src=\"/images/nyc_pictures/fish.jpg\" alt=\"Fish\"></p>\n<p><img src=\"/images/nyc_pictures/pond.jpg\" alt=\"Pond\"></p>\n<p>Small shrine:</p>\n<p><img src=\"/images/nyc_pictures/shrine.jpg\" alt=\"Shrine\"></p>\n<p>There are also indoor (greenhouse) gardens:</p>\n<p><img src=\"/images/nyc_pictures/hugelilypads.jpg\" alt=\"Lilypads\"></p>\n<p><img src=\"/images/nyc_pictures/niceflower.jpg\" alt=\"Flower\"></p>\n<p>Great place overall! I had a lot of fun just walking around. Also on Saturdays\nif you get there between 10 and noon it's free!</p>\n<h3>Bridges!</h3>\n<p>I took some pictures of the bridges (I'm so ashamed of doing this in public,\nI feel I've been forever marked a tourist)</p>\n<p><img src=\"/images/nyc_pictures/manhattanbridge.jpg\" alt=\"Manhattan\"></p>\n<p><img src=\"/images/nyc_pictures/brooklynbridge.jpg\" alt=\"Brooklyn\"></p>\n<p>That was about it! I've been really into exploring the city and getting\na better sense of how it fits together geographically (biking is great for\nthis!). Here's a bonus picture of my anxious puppy, whom I miss very much:</p>\n<p><img src=\"/images/nyc_pictures/spinach.jpg\" alt=\"Spinach &lt;3\"></p>\n<p>She's not in NYC! :(((</p>\n","date":"2015-05-31T02:18:17.000Z"},"day_four_at_rc":{"title":"Day Four at RC (friday!)","body":"<p>I'm now done with the first week at RC, and I think to celebrate I'll\nwrite a blog post that is actually substantial!</p>\n<p>This morning I rode in. I'm sort of amazed by the traffic here - everyone\njust seems sort of used to this crazy situation. At least people are calm\nabout it, in Boston you'd think that people had never waited in traffic or\nfor a red light before.</p>\n<p>Today I resubmitted task 01 of the Eudyptula challenge. I think I posted\nbefore that I got the kernel module working (pretty quickly, actually, it\nonly took an hour or so) but I got tripped up on the Makefile. I have to\nadmit, first off, that I've never really bothered to learn about make\n'from the ground up', mainly because the manual is COLOSSAL and a couple\nsimple template Makefiles seem to serve well enough.</p>\n<p>The challenge basically wanted a Makefile that could be compiled against\nthe source for the currently running kernel or against an arbitrary\nkernel. I think I gave it what it wanted? Little takes a while to reply,\nso we'll see.</p>\n<p>I worked more on my git printer. I still feel like I'm just fighting with\nC to get it to do what I want, but I got another feature working! I can\nnow get the hash of all the parents of a given commit. Along with getting\nthe top commit (the commit referenced in .git/refs/heads/master, usually)\nI think I'm getting close to finishing that up. Which is exciting! I need\nto think pretty carefully about the best way to print stuff out, though,\nwhich I'm going to hopefully do this weekend.</p>\n<p>I also visited the <a href=\"http://bluestockings.com/\">Bluestockings</a> bookstore,\nwhich is just a couple of blocks from RC. I bought a Delaney novel,\na patch, and a sticker with Zapatistas on it. Good stuff!</p>\n<p>I spent some more time working on the Matasano stuff - I'm a little\nembarrassed I'm still on the first problem, but I feel like this has\nmostly to do with my decision to do the problems in C...</p>\n<p>I need to use a language that's easier for me! I think for these problems\ngoing forward I'll stick to Python.</p>\n<p>After leaving RC for the day I biked up towards Central Park to see\na great <a href=\"http://www.meetup.com/nylug-meetings/events/221826531/\">talk about\nGnuPG</a> put on by\nthe NYC GNU/Linux users group. I learned a lot about the current state of\nGPG, what's being worked on and planned for the future, and some practical\nstuff about key signing, storing and sharing keys, and some fancy stuff\none can do with a GPG key. It's good also to put some of criticism of\nGPG/OpenPGP in context - dkg made the point repeatedly that although the\nadoption of GPG for email encryption is low (like really really low) GPG\nis a critical piece of the software distribution infrastructure, and so\ncalls to toss is out in favor of a more modern system may be premature.</p>\n<p>That said, obviously if the goal is to increase the use of secure email\nthe UX needs to be streamlined. This is something that really hit home for\nme when I was making my <a href=\"https://github.com/aliceriot/PocketGuide\">GPG\nZine</a> and had to explain things\nin so much detail. This is part of the reason why I'm so excited about\nprojects like <a href=\"https://keybase.io/\">Keybase.io</a>, if this can be integrated\ninto reasonably friendly interfaces like Enigmail we're most of the way\nthere! Well, as long as we can convince everyone to use Thunderbird...</p>\n","date":"2015-05-30T04:29:01.000Z"},"day_6_at_rc":{"title":"Day 6 at RC","body":"<p>Today I successfully finished the first Matasano challenge! Yes! It\nrequires you to build a hex -&gt; base64 translator, which works\nsuccessfully! I didn't yet implement what to do if there aren't enough\nbytes for base64 (e.g. if the last set of three bytes is only two) but\nthat's ok!</p>\n<p>I also attended the cryptography workshop that Frank hosted today, which\nwas really great. I think I'm going to start doing a coursera course on\ncryptography.</p>\n<p>Also, I bought a fender for my bike! Dry(ish) ride home!</p>\n","date":"2015-06-02T22:21:38.000Z"},"rc_day_five":{"title":"RC day five","body":"<p>Late post!</p>\n<p>On Monday I passed the first Eudyptula challenge, and got the email for\nthe 2nd one, which involves compiling and booting (in a VM or not) the\nLinux kernel, from the current source. It compiled pretty easily because\nI used the</p>\n<pre><code>make localmodconfig\n</code></pre>\n<p>option, which gives you the configuration that was used to compile the\nkernel that is currently running on your system. I found the <a href=\"https://wiki.archlinux.org/index.php/Kernels/Compilation/Traditional\">Arch wiki\narticle</a>\nhelpful, and in the end I'm not sure why I previously viewed compiling\na kernel as something serious!</p>\n<p>Frank Wang, the current resident at RC, also ran a really cool workshop\nyesterday, where we implemented a password manager in Javascript. I had\nfun filling in all the functions necessary to make that work.</p>\n<p>I also went to the Monday night talk (delicious food!) and got rained on\na lot :/</p>\n<p>Oh yeah, I also moved from the airbnb I was staying in to a real\napartment! It's a bit closer to RC as well (Crown Heights vs. Kensington).\nI'm also figuring out better bike routes to take through Brooklyn, I've\ndetermined that Eastern Parkway -&gt; Vanderbilt avenue is a lot better than\nthe route I was taking from Kensington.</p>\n","date":"2015-06-02T16:13:38.000Z"},"rc_day_7":{"title":"RC Day 7","body":"<p>I passed Eudyptula task 02! Nice! So now I have to compile a custom kernel\nthat has '-eudyptula' in the version string. I compiled the kernel with\nthis option, and I made a patch (following the mailing list conventions)\nand sent it off! We'll see when I get it back if that was good.</p>\n<p>Frank also ran another workshop today, which was about finding exploits in\nunsafe C code. Buffer overflows and the like! Fun stuff. So I worked on\na couple of those problems today, and then also started working on the 2nd\nMatasano challenge (which has us implement 'fixed xor'). I ended up\nfinishing the XOR problem, because I could reuse a good deal of the code\nfrom the first challenge. Nice!</p>\n<p>Tomorrow I hope to do the next matasano problem, work on solving some of\nthe exploits from today, and (hopefully!) do the next eudyptula challenge.</p>\n","date":"2015-06-04T00:14:55.000Z"},"rc_day_8":{"title":"RC Day 8!","body":"<p>My blog entries are getting later and later...</p>\n<p>On day 8 (yesterday) I worked on a couple of things. When I got to RC my\nlaptop decided it really didn't want to connect to the wireless network.\nAfter 45 minutes of restarting the machine, stopping and restarting\nNetworkManager.service, and staring at dmesg and journalctl I gave up and\njust used my phone as a hotspot (luckily I didn't have to download\nanything large). Then when I tried connecting to the RC wireless again\na couple hours later, it mysteriously worked. Ghosts in my computer? The\nNSA? No idea.</p>\n<p>Anyway, I mainly worked on C related things. I designed a solution to the\nMatasano challenge no. 3, and wrote most of the library I need for it.\nI hope to finish that up today! It's kind of a fun thing, but if I get it\nworking I want to present on it next week so I don't want to spoil.</p>\n<p>I also resubmitted Eudyptula task 03 (oopsie I didn't format my email\ncorrectly), and read the section about pointers and arrays in K&amp;R. I feel\nlike I'm getting a much better handle on how to write C code in a way that\nuses the potential of the language more, rather than just translating\ndesign patterns that would be appropriate for OOP into it.</p>\n<p>Today I hope to finish Cryptopals task 03 (and have someone take a look at\nthe design of my solution), read more K&amp;R, and start the Stanford\ncryptography Coursera course (I signed up on Monday but haven't forced\nmyself to start watching videos yet). We'll see!</p>\n","date":"2015-06-05T14:14:12.000Z"},"weekend_update":{"title":"Weekend update!","body":"<p>I forgot to post on Friday! Yeesh! Too busy enjoying the MoMA. It's free\non Friday evenings, which is great because I resent paying to look at\nthings. I got to see a couple of really cool things, including a couple of\nMalevich pieces and a lot of really lovely photography. Also, free!</p>\n<p>Beside art, on Friday I started the Coursera cryptography course (from\nStanford), basically just by watching the first two intro videos. I hope\nto get more of that done in the coming week.</p>\n<p>I also worked a lot on the third Matasano problem, which I was not able to\nget working on Friday. BUT! I did get it working today! So I can now break\na super simple random 8 bit cypher pretty reliably. I think my solution\ndoesn't perform perfectly on the test hex string because the message is so\nshort, I want to do some experiments tomorrow to see if it performs better\nwith more information.</p>\n<p>Yesterday I also explored Central Park a bit, which is really lovely. NYC\nhas such nice green space!</p>\n","date":"2015-06-08T00:37:33.000Z"},"rc_days_10_and_11":{"title":"RC Days 10 and 11","body":"<p>Late again! Oh well.</p>\n<p>Yesterday I started working on solving cryptopals problem 4, which has\nproved tricky so far. I tried an approach yesterday, which hasn't worked\nyet, and I also tried another strategy today. Hopefully tomorrow I'll make\nit work! It's encouraging to think that during the first week I struggled\nto just get the XOR program working!</p>\n<p>Yesterday I also watched some of the videos for the crypto course, and\nspent a ton of time trying to compile and run TextSecure from source.\nI was trying to get it to use a build option for a debug mode, so that\nI can try out the\n<a href=\"https://github.com/WhisperSystems/TextSecure-Browser\">TextSecure</a>\nchromium extension which is currently under development. I think I might\nneed to do this on real hardware? I need access to the camera in order to\npair the two things. It also turns out that you can't install two versions\nof the same app on one phone (I think) so the debugTest build won't\ninstall to my phone over the release TextSecure build from the Play store.\nWhich is probably good, things that keep me from messing up the devices\nI actually need to use are kind of helpful!</p>\n<p>On Tuesday I watched more crypto course videos, worked on Matasano task04,\nand also picked back up my git visualization project. Initially my goal\nwith that was to print out the commit tree without depending on any\nlibraries or other programs (besides git) but I may try to be a little\nmore pragmatic - I'm thinking of writing it in Python to make it easier on\nmyself too.</p>\n<p>That's it!</p>\n","date":"2015-06-09T18:43:50.000Z"},"today_at_rc":{"title":"Today at RC!","body":"<p>Today was great! I got a lot of the functionality in my git printing tool\ndone, I have now successfully implemented both a hash table and an n-ary\ntree for this project! Basically all I have left to do is implement\nsomething to print out the tree, so I just need to think carefully about\nhow to deal with commits with multiple children or parents.</p>\n<p>The downside to that was that I didn't get too much else done yet today.\nI'm stil at RC now, and I think I may try to watch some videos for the\ncrypto course I started before heading home.</p>\n","date":"2015-06-11T23:33:36.000Z"},"til_pointers_and_stuff_rc_day_14":{"title":"TIL: pointers and stuff (RC day 14?)","body":"<h1>TIL: pointers and stuff (RC day 14?)</h1>\n<p>I may be counting the days wrong? Ehh not that important I guess.</p>\n<p>Today I read a section in K&amp;R (the C programming language) that was quite\nilluminating! Some of the content presented in this book is so <em>nice</em>,\nthey just give you these gorgeous super minimal functions for doing common\nthings. In chapter 5, section 5.7 we get this lovely pair of functions for\nconverting the day of the year to month/day, and vice versa:</p>\n<pre><code class=\"language-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">char</span> daytab[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">13</span>] = {\n{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>},\n    {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>}\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">day_of_year</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> year, <span class=\"hljs-keyword\">int</span> month, <span class=\"hljs-keyword\">int</span> day)</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> i, leap;\n    leap = year%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">0</span> &amp;&amp; year%<span class=\"hljs-number\">100</span> != <span class=\"hljs-number\">0</span> || year%<span class=\"hljs-number\">400</span> == <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; month; i++)\n        day += daytab[leap][i];\n    <span class=\"hljs-keyword\">return</span> day;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">month_day</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> year, <span class=\"hljs-keyword\">int</span> yearday, <span class=\"hljs-keyword\">int</span> *pmonth, <span class=\"hljs-keyword\">int</span> *pday)</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> i, leap;\n\n    leap = year%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">0</span> &amp;&amp; year%<span class=\"hljs-number\">100</span> != <span class=\"hljs-number\">0</span> || year%<span class=\"hljs-number\">400</span> == <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; yearday &gt; daytab[leap][i]; i++)\n        yearday -= daytab[leap][i];\n    *pmonth = i;\n    *pday = yearday;\n}\n</code></pre>\n<p>I love relying on a boolean expression to get an array index! Nice and\nelegant. Anyway, in trying to get this to work I learned something useful.\nI originally had this as <code>main</code>:</p>\n<pre><code class=\"language-c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"March 14th is day %d!\\n\"</span>, day_of_year(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">14</span>));\n    <span class=\"hljs-keyword\">int</span> *pmonth, *pday;\n    month_day(<span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">246</span>, pmonth, pday);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The 246th day of 2012 is %d/%d/12!\\n\"</span>, *pmonth, *pday);\n}\n</code></pre>\n<p>This segfaults, and I wasn't super clear on why that happened initially.\nI've created two pointers of type <code>int *myptr</code>, and the passed them into\nthe function <code>month_day</code>. That seems good, then I should be able to just\nassign the two values I'm after to the dereferenced pointer (we need to do\nthis to get around C restriction to returning one value).</p>\n<p>Why doesn't it work? Because the pointers aren't pointing at anything! All\nI've done is declared the two pointers, but I haven't declared anything\nfor them to point to! I'm not sure if they are initialized as empty, or if\nthey just point to garbage, but either way there isn't something declared\nyet that I can clearly dereference to in order to get the output from my\n<code>month_day</code> function. We can fix this by changing <code>main</code> around:</p>\n<pre><code class=\"language-c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"March 14th is day %d!\\n\"</span>, day_of_year(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">14</span>));\n    <span class=\"hljs-keyword\">int</span> month, day;\n    <span class=\"hljs-keyword\">int</span> *pmonth = &amp;month;\n    <span class=\"hljs-keyword\">int</span> *pday = &amp;day;\n    month_day(<span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">246</span>, pmonth, pday);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The 246th day of 2012 is %d/%d/12!\\n\"</span>, *pmonth, *pday);\n}\n</code></pre>\n<p>It works! Nice! Remember to make your pointers point at things! Otherwise\nyou're just tossing your results off a cliff! Or something?</p>\n","date":"2015-06-12T18:57:31.000Z"},"rc_day_15_omigod_it_finally_works":{"title":"RC Day 15: omigod it finally works","body":"<p>So in my first week here at RC I started a small utility to print out the\ncommit history for a git repository. I wanted to write this in C, for some\npractice using C for a real project, which was maybe a bad choice - I'm\npretty sure writing the same program in Python would have been about\n1/10th of the time. Ah well!</p>\n<p>Anyway, I finished this project today! It works, look:</p>\n<p><img src=\"/images/gitviz.png\" alt=\"gitviz\"></p>\n<p>Which is super exciting! The hardest part of this project was probably\njust figuring out how to print it out - I got some great help from Tom (RC\nfacilitator) which set me on the right track. I think it's been good for\nmy programming self-confidence to carry a small project like this all the\nway through, and to keep going on it even when reaching difficult parts.</p>\n<p>I learned a bit more about C, especially about types and structs, and also\nabout building a slightly larger project than I had previously. I tore\napart and reorganized several times during the project, and spent a little\nmore time ensuring things were organized in a sensible way (which\ndefinitely made things easier to debug!). Nice!</p>\n<p>I also decided to start learning about Rust today, so I've been reading\nthrough the (very lovely) <a href=\"http://doc.rust-lang.org/stable/book/\">Rust\nbook</a>. I have another project I'm\nthinking of starting either this week or next week, and I was planning to\ntry to learn C++, but I might try Rust instead! We'll see.</p>\n","date":"2015-06-15T20:54:16.000Z"},"rc_day_16":{"title":"RC Day 16","body":"<p>It's day 16 already? Yikes! Time has really been flying by here. It's easy\nto sort of let it slide by, and feel like I haven't been doing too much,\nbut when I look back at my blog posts I realize that I've done quite a bit\nof stuff since I got here!</p>\n<p>Today I read some more of the Rust book, and got through the first two\nexample programs. They are fairly simple things, but throw in some wacky\nRust stuff that I don't understand yet. I'm liking it so far!</p>\n<p>I also read some K&amp;R, did some of the Stanford cryptography course, and\nworked on Eudyptula task 04. Good stuff!</p>\n","date":"2015-06-17T02:24:51.000Z"},"rc_day_17":{"title":"RC Day 17","body":"<p>This is a bit late! oops.</p>\n<p>Yesterday (day 17) I read a bunch of the rust book, did a few exercises\nfrom K&amp;R, and worked on the fourth Matasano problem. Specifically,\nI decided to reimplement the solution I was working on in Python, so I can\ntest out different approaches a little bit more quickly. We'll see how\nthat goes!</p>\n<p>Plans for today include more Rust, more work on the above-mentioned Python\nstuff, and some videos from the cryptography course.</p>\n","date":"2015-06-17T23:01:01.000Z"},"rc_day_18":{"title":"RC day 18","body":"<h1>RC day 18</h1>\n<p>Today I learned some fun stuff about Rust - it turns out it supports a lot\nof functional programming! This post centers around the <code>iterator</code> type,\nwhich we can create in a couple ways. We can directly create an iterator\nby doing something like:</p>\n<pre><code class=\"language-rust\"><span class=\"hljs-keyword\">let</span> myiterator = (<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">100</span>);\n</code></pre>\n<p>This creates an iterator object, which describes the process of iterating\nfrom 0 to 99 (or something like that). This is (as far as I can tell)\nessentially identical to doing something like</p>\n<pre><code class=\"language-haskell\">[<span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.99</span>]\n</code></pre>\n<p>in Haskell, in that the rust iterator is lazy - we don't actually have all\nthe values from 0 to 99 stored in that iterator object, but instead we can\nget them from it if we want. We can also get an iterator from other sorts\nof objects, e.g. if we had:</p>\n<pre><code class=\"language-rust\"><span class=\"hljs-keyword\">let</span> myvector = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> myiter = myvector.iter();\n</code></pre>\n<p>Which gives us an iterator containing the items in that vector. I'm not\nsure if this is lazy in the same way - does the iterator store references\nto the objects in the vector, so it can get the values only when it needs\nto? Not sure. I'm also not sure what the difference is between the above\nand doing something like:</p>\n<pre><code class=\"language-rust\"><span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> &amp;myvector {\n    do_something_with(v);\n}\n</code></pre>\n<p>is a temporary iterator created on the fly and destroyed when the loop\nexits? No idea. Anyway, what can we do with these things? Well, so far\nI've learned about two classes of functions which can operate on\niterators: consumers and iterator adapters.</p>\n<h2>Consumers</h2>\n<p>Consumers are functions which take an iterator as an argument and return\nsomething else - this could be an number computed with the contents of the\niterator, a vector, or something else entirely (a duck?). This lets us do\nsome fun Haskell-ey things, since iterators are lazy! A sort of boring\nconsumer is <code>collect</code>, which takes an iterator and returns a collection of\nthe items described by the iterator. To get a vector of ints from an\niterator we could do something like:</p>\n<pre><code class=\"language-rust\"><span class=\"hljs-keyword\">let</span> myvector = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">100</span>).collect::&lt;<span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-keyword\">i32</span>&gt;&gt;();\n</code></pre>\n<p>More exciting is <code>find</code>, which also returns a collection, but accepts an\nargument consisting of a Rust-style boolean lambda function (which we call\na closure - I think this is a lambda function and the context in which it\nis declared? Something along those lines). Here's one which will give us\na collection of all the even numbers from 0 to 100:</p>\n<pre><code class=\"language-rust\"><span class=\"hljs-keyword\">let</span> evens = (<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">101</span>).find(|x| x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>);\n</code></pre>\n<p>Here the <code>|</code> pipes delimit the arguments to our lambda function, and the\nfunction body is what follows in the rest of the argument to <code>find</code>. Nice!\nI sort of love lambda functions.</p>\n<p>Another familiar consumer is fold, which Haskell folks will recognize\nright away. This is very similar to how fold works in Haskell - it takes\na base, and a closure with two arguments, an accumulator and an element.\nHere's how we could sum the elements of an iterator using fold:</p>\n<pre><code class=\"language-rust\"><span class=\"hljs-keyword\">let</span> exciting_sum = (<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">1000</span>).fold(<span class=\"hljs-number\">0</span>, |sum, x| sum + x);\n</code></pre>\n<p>So we have 0 as an accumulator, and our closure takes two arguments, <code>sum</code>\nand <code>x</code>. Essentially 0 starts off the process, so for the first element\nfrom the iterator we add 0 (sum) to the element (x), which produces the\nnew value for sum. This is added to the second element of the list, and so\non. Cool!</p>\n<h2>Adapters</h2>\n<p>Adapters also operate on iterators, but instead of returning any kind of\nobject they are restricted to returning other iterators. These are like\nfunctions of type <code>[a] -&gt; [a]</code> in Haskell, and specifically like the\nprelude functions <code>map</code>, <code>filter</code>, etc.</p>\n<p>In fact, we have an iterator adapter called map! This again takes\na closure, and will return an iterator consisting of the values produced\nby applying that function to the elements of our original iterator. What's\nthis look like? Ok, we'll calculate the first 20 squares:</p>\n<pre><code class=\"language-rust\"><span class=\"hljs-keyword\">let</span> mynums = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">21</span>);\n<span class=\"hljs-keyword\">let</span> squares = mynums.map(|x| x*x);\n</code></pre>\n<p>Nice! That's not too bad. Another cool one is <code>filter</code>, which works\nbasically just like filter in Haskell - we pass it a closure that returns\na boolean value. This is analogous to the consumer <code>find</code>, but it returns\nanother iterator instead of a collection. We could use it to get an\niterator of all the numbers which are pretty:</p>\n<pre><code class=\"language-rust\"><span class=\"hljs-keyword\">let</span> prettynums = (<span class=\"hljs-number\">1</span>..).filter(|&amp;x| x == <span class=\"hljs-number\">17</span>);\n</code></pre>\n<p>Cool! Note that because this is not a consumer we need to pass a reference\nto <code>x</code> into the closure. Also we have support in Rust for lazy infinite\ninterators, similar to infinite lists in Haskell.</p>\n<p>This is all very cool! I'm excited to be able to use some of the\nfunctional programming idioms I've learned from Haskell and Scheme in rust\ncode :D</p>\n","date":"2015-06-18T17:27:17.000Z"},"heading_to_boston":{"title":"Heading to Boston!","body":"<p>Today I'm heading to Boston for the weekend! I'm up way too early to go\nget a very early bus. I probably won't write any code today (cars +\nscreens = motion sickness for me). Back on Sunday!</p>\n","date":"2015-06-19T09:16:22.000Z"},"reinstalling_arch_or_oh_god_again_why":{"title":"Reinstalling Arch: Or, oh god, again, why?","body":"<h1>'Reinstalling Arch: Or, oh god, again, why?'</h1>\n<p>So on Monday I got a new computer, which is great! But new computer means\nit's time to reinstall Arch. Which is not great. I think that\non a properly set-up Arch system you don't need to do too much more\nsystem config work than other distros, but the initial install can be\na really big pain.</p>\n<p>The computer I bought (a Lenovo Yoga 2 Pro) turned out to be a fairly\nnon-cooperative partner in this process! The first issue I encountered woke me\nup in the middle of the night on Monday. I had left my old laptop and the\nnew laptop on in my room, and files were transferring to the new computer\nover scp. At roughly 3:30AM the new computer started making this horrible\ncrackling/chirping noise, which woke me up. I spent a lot of time\nyesterday sorting this out - it turns out it's due to some bug in the\nintel audio driver, and it's specifically something relating to the two\nsound devices on the machine (sound over HDMI and the standard soundcard).\nIf I blacklist all the kernel modules\nrelating to HDMI sound, no horrible noise! Success!</p>\n<p>Having solved that I just had to deal with the HiDPI screen. Since I spend\nmost of my time in the terminal I just cranked up the font size for\n<code>urxvt</code> to 16, which is nice and readable. For <code>chromium</code> we can do</p>\n<pre><code class=\"language-bash\">chromium --force-device-scale-factor=1.5\n</code></pre>\n<p>to activate the HiDPI scaling support which was added fairly recently.\nI like 1.5, which makes the UI elements small but the page text is still\nnice and readable. I couldn't figure out how to make this setting\npermanent within <code>chromium</code>, so I wrote a shellscript called\n<code>legible_chromium</code> that executes the above command.</p>\n<p>This computer also does the flippy thing! It has a hinge that allows the\nscreen to flip around so that it becomes a tablet, of sorts. The 16:9\naspect ratio makes it a little strange in portrait mode (so narrow) but\nit's kind of nice to read an article with the keyboard tucked away.\nI wrote two little shellscripts to make this work. The first is\n<code>tablet_mode</code>:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">#!/bin/sh\n</span>\nxrandr --output eDP1 --rotate left\nsynclient TouchpadOff=$(synclient <span class=\"hljs-_\">-l</span> | grep -c <span class=\"hljs-string\">'TouchpadOff.*=.*0'</span>)\n</code></pre>\n<p>This rotates the screen to one of the possible portrait layouts, and the\nsecond line toggles the touchpad off. A quirk of the Yoga design is that\nthe keyboard is turned off by the screen being flipped back (somewhere\nclose to all the way around) but the hardware doesn't do anything about\nthe touchpad, so we need to take care of that ourselves. This actually\njust toggles the touchpad state, so if you already have it off it might\nget out of sync - I have another shellscript which just runs that command\nin that case.</p>\n<p>The second script is really similar! Here's <code>laptop_mode</code>:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">#!/bin/sh\n</span>\nxrandr --output eDP1 --rotate normal\nsynclient TouchpadOff=$(synclient <span class=\"hljs-_\">-l</span> | grep -c <span class=\"hljs-string\">'TouchpadOff.*=.*0'</span>) \n</code></pre>\n<p>In order for this to work properly you also need to have the\n<a href=\"https://github.com/wolneykien/xrandr-align\">xrandr-align</a> program\nrunning, so that the touchscreen input is rotated along with the display.\nI haven't tried many programs, but <code>chromium</code> works great with the\ntouchscreen as long as the <code>usbtouchscreen</code> module is loaded (you need to\nrestart <code>chromium</code> in order for loading the module to take effect). This\nlets you drag a finger to scroll. I'm not sure how useful the convertible\naspect of the machine will be, but it wasn't too bad to set it up.</p>\n<p>Anyway, the computer is mostly set up now! Hooray, time to actually write\nsome code!</p>\n","date":"2015-06-25T01:37:46.000Z"},"data_structures":{"title":"Data Structures","body":"<p>I've been trying to find a way to teach myself data structures (gotta\nlearn those CS fundamentals for some reason) that was fun and engaging.\nI like reading books for some stuff, but for some reason when I try to\nread about them my eyes just glaze over and I space completely out.</p>\n<p>So, I decided to think a bit about how I usually learn best. It's actually\nby writing about things - writing a short guide to a piece of software, or\nan explanation for some strange (unexpected) behavior I've encountered\nreally helps solidify my mental model for how that thing works. I decided\nto disregard learning data structures from any particular source or book\nand just implement them myself!</p>\n<p>I've pretty much finished with my <a href=\"https://github.com/aliceriot/linkedlist\">linked\nlist</a> implementation. In addition\nto just writing the code I wrote a little essay about what I learned as\nI went, and the design choices I made. I'm also currently working on\na <a href=\"https://github.com/aliceriot/hashtable\">hash table</a>, which has also\nbeen fun.</p>\n<p>Anyway, the moral of the story is to think about how you learn best, and\nthen do that! Don't spend hours watching Coursera videos or poking through\nsome tome if it doesn't work for you.</p>\n","date":"2015-08-07T14:12:52.000Z"},"vim_and_tmux_best_friends":{"title":"Vim and tmux: best friends","body":"<h1>Vim and tmux: best friends</h1>\n<p>I just wanted to share a lovely plugin for Vim that makes tmux and vim\neven better BFFs than they were before. I'm talking, of course, about\n<a href=\"https://github.com/christoomey/vim-tmux-navigator\">vim-tmux-navigator</a>!</p>\n<p>Basically the idea is this: if you use splits ('panes') in tmux and you\nalso use Vim splits there's a little bit of friction whenever you want to\nmove around. You need to remember whether that thing where you want to go\nis a tmux or vim split, and use the right key combo based on whether\nyou're in Vim or not. For me, I had <code>leader-hjkl</code> set up to move through\nVim splits, and <code>C-w-hjkl</code> to change tmux splits. This was all very\nconfusing and bad.</p>\n<p>Enter the plugin! Basically what it lets you do is setup one key combo\nacross Vim and tmux that you can use to navigate between tmux panes, and\nbetween Vim splits within a Vim instance. It's super super nice! Now you\njust need to know wherer you want to go and you can mash keys to get\nthere. Great!</p>\n<h2>Configuration funtimes!</h2>\n<p>Ofc you can just use the default bindings if you want (which are\n<code>crtl-hjkl</code>) but this overrides the <code>crtl-l</code> clear screen binding.\nI discovered I do this almost constantly when I first installed this\nplugin, if you don't know what I'm talking about then just go with the\ndefaults!</p>\n<p>I wanted to set it up to use <code>Alt-hjkl</code> to move around, which is the\nbinding I used to use for i3wm. Anyway, here's how we do that!</p>\n<h3>Install the plugin</h3>\n<p>um first you need to install it. do this:</p>\n<pre><code class=\"language-vimrc\"><span class=\"hljs-attribute\">Plugin</span> <span class=\"hljs-string\">'christoomey/vim-tmux-navigator'</span>\n</code></pre>\n<p>if you use Vundle. If you don't, you probably know how to sort things out\n(e.g. with pathogen or what have you) but if you don't use a package\nmanager, then totally switch to\n<a href=\"https://github.com/VundleVim/Vundle.vim\">Vundle</a>! b/c it is great.</p>\n<h3>~/.vimrc</h3>\n<p>We need some stuff in our <code>~/.vimrc</code>. You can check out the relevant file\nin my <a href=\"https://github.com/aliceriot/dotfiles/blob/master/vimrc/laptop_plugin_config.vimrc\">dotfiles\nrepo</a>.\nHere's what we need:</p>\n<pre><code class=\"language-vimrc\"><span class=\"hljs-keyword\">let</span> g:<span class=\"hljs-attr\">tmux_navigator_no_mappings</span> = <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>this blows away the default mappings, and lets us do our own. Then we need\nto set them up! A word of warning: how you accomplish the following will\ndepend to a certain extent on your terminal emulator. I use the gnome\nterminal, which doesn't send a normal Alt through to the terminal, so you\ncan't use the normal <code>A-j</code> or <code>M-j</code> notation to say 'hey, bind Alt-j to\nsuch-and-such'. Instead we have to send the right escaped keycode, by\ndoing <code>crtl-v</code> and then typing the key we want. So if you copy paste this\nit may not work? Try it! Then try overwriting the bindings with <code>C-v-Alt</code>.</p>\n<p>Anyway, here's how we bind!</p>\n<pre><code class=\"language-vimrc\">nnoremap &lt;silent&gt; \u001bh <span class=\"hljs-symbol\">:TmuxNavigateLeft&lt;cr&gt;</span>\nnnoremap &lt;silent&gt; \u001bj <span class=\"hljs-symbol\">:TmuxNavigateDown&lt;cr&gt;</span>\nnnoremap &lt;silent&gt; \u001bk <span class=\"hljs-symbol\">:TmuxNavigateUp&lt;cr&gt;</span>\nnnoremap &lt;silent&gt; \u001bl <span class=\"hljs-symbol\">:TmuxNavigateRight&lt;cr&gt;</span>\nnnoremap &lt;silent&gt; \u001b\\ <span class=\"hljs-symbol\">:TmuxNavigateRight&lt;cr&gt;</span>\n</code></pre>\n<p>Great! Now <code>Alt-hjkl</code> will move you around within Vim in a way that makes\nsense for Vim people. What about tmux?</p>\n<h3>~/.tmux.conf</h3>\n<p>For tmux we can use the normal <code>m-h</code> notation (for meta-h). This looks\nlike:</p>\n<pre><code>is_vim='echo <span class=\"hljs-string\">\"#{pane_current_command}\"</span> | grep -iqE <span class=\"hljs-string\">\"(^|\\/)g?(view|n?vim?)(diff)?$\"</span>'\nbind -n m-h<span class=\"hljs-built_in\"> if-shell </span><span class=\"hljs-string\">\"$is_vim\"</span> <span class=\"hljs-string\">\"send-keys m-h\"</span> <span class=\"hljs-string\">\"select-pane -L\"</span>\nbind -n m-j<span class=\"hljs-built_in\"> if-shell </span><span class=\"hljs-string\">\"$is_vim\"</span> <span class=\"hljs-string\">\"send-keys m-j\"</span> <span class=\"hljs-string\">\"select-pane -D\"</span>\nbind -n m-k<span class=\"hljs-built_in\"> if-shell </span><span class=\"hljs-string\">\"$is_vim\"</span> <span class=\"hljs-string\">\"send-keys m-k\"</span> <span class=\"hljs-string\">\"select-pane -U\"</span>\nbind -n m-l<span class=\"hljs-built_in\"> if-shell </span><span class=\"hljs-string\">\"$is_vim\"</span> <span class=\"hljs-string\">\"send-keys m-l\"</span> <span class=\"hljs-string\">\"select-pane -R\"</span>\nbind -n m-\\<span class=\"hljs-built_in\"> if-shell </span><span class=\"hljs-string\">\"$is_vim\"</span> <span class=\"hljs-string\">\"send-keys m-\\\\\"</span> <span class=\"hljs-string\">\"select-pane -l\"</span>\n</code></pre>\n<p>Great! Basically this defines a little function to figure out if a pane\ncontains a Vim instance, and then based on that info it decides whether to\nsend the keybind through to Vim (to move around between Vim splits) or to\nmove to another tmux pane. Lovely!</p>\n<p>I can't really understate my enthusiasm for this setup! It's literally so\ngreat!</p>\n","date":"2015-08-10T15:05:48.000Z"},"literate_programming_in_python":{"title":"Literate programming in Python","body":"<p>Literate programming is something I read about a while ago (probably\nwhile reading <a href=\"200~https://en.wikipedia.org/wiki/Donald_Knuth\">Donald Knuth's</a>\nterrifying overachiever Wikipedia page) and while I thought it sounded\ncool, I never really gave it a try. Well, I have now given it a try!</p>\n<p>It's actually really great! I've just started a project to write a DNS\nresolver in literate Python. It's not very far along, but you can check\nout the program\n<a href=\"https://github.com/aliceriot/pyresolve/blob/master/pyresolve.md\">here</a>.\nI'm using a package called Pweave to make this all work together. It's\npretty easy, but there are a couple of rough edges. So, how does it work?</p>\n<h2>Writing literate Python</h2>\n<p>I'm doing a pretty simple approach, which is to write the\ndocumentation/markup in Markdown. Pweave also supports LaTeX, ReST, and\na couple of other text formatting languages if you have a strong\npreference. Basically what we do is write something like this:</p>\n<pre><code><span class=\"hljs-comment\">#My program</span>\n\nThis <span class=\"hljs-keyword\">is</span> my great program. Its great!\n\nAnd now, some code:\n\n&lt;&lt;&gt;&gt;=\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">functionone</span><span class=\"hljs-params\">(myarg)</span>:</span>\n    dostuff(myarg)\n    <span class=\"hljs-keyword\">for</span> foo <span class=\"hljs-keyword\">in</span> bar:\n        <span class=\"hljs-keyword\">raise</span> ValueError\n    <span class=\"hljs-keyword\">return</span> asdfasdf\n<span class=\"hljs-meta\">@</span>\n\nWhat a great program!\n</code></pre>\n<p>OK, so basically you just write a Markdown file, and any code you write in\nbetween a <code>&lt;&lt;&gt;&gt;=</code> opener and the <code>@</code> closer will be the source code. The\nPweave program gives you two command line utilities that are helpful. The\nfirst is <code>Pweave</code>, which will do a 'weave' operation on your source code.</p>\n<p>Knuth invented this terminology: he called his hybrid language (composed\nof LaTeX and Pascal source) WEB - so in the grand tradition of cute names\nin programming the main operations we can do on the WEB are Weaving and\nTangling. Weaving takes the combined source and outputs cleanly formatted\ndocumentation - this could be html, Markdown, or LaTeX/PDF. Tangling does\nthe opposite operation, and outputs clean source code - chopping out all\nof the documentation.</p>\n<p>With Pweave, if we have a really interesting <code>myprogram.mdw</code>, we can get\na clean .md file with:</p>\n<pre><code class=\"language-bash\">Pweave <span class=\"hljs-_\">-f</span> pandoc myprogram.mdw\n</code></pre>\n<p>The <code>-f</code> flag is our output format, so we could also pick html or PDF or\nsomething stranger here. If we want to do a tangle, we do this:</p>\n<pre><code class=\"language-bash\">Ptangle myprogram.mdw\n</code></pre>\n<p>This will give us a nice clean <code>myprogram.py</code> in the same directory. Cool!</p>\n<h2>Vim strangeness</h2>\n<p>So that's great! It's pretty easy to write your documentation and program\nat the same time, and it really makes you ensure that you're keeping the\ndocumentation and the code in sync. The problem with all this, though, is\nthat they file you're editing is effectively two different languages. We\nhave Markdown for the documentation and Python for the actual program, so\nhow does your editor decide what syntax highlighting to use? Well, not all\nthat intelligently.</p>\n<p>I ended up adding a couple of bindings to Vim to switch the filetype\nbetween Markdown and Python:</p>\n<pre><code class=\"language-vimrc\"><span class=\"hljs-keyword\">nnoremap</span> <span class=\"hljs-symbol\">&lt;Leader&gt;</span><span class=\"hljs-keyword\">lp</span> :<span class=\"hljs-keyword\">setlocal</span> ft=<span class=\"hljs-keyword\">python</span><span class=\"hljs-symbol\">&lt;cr&gt;</span>\n<span class=\"hljs-keyword\">nnoremap</span> <span class=\"hljs-symbol\">&lt;Leader&gt;</span>md :<span class=\"hljs-keyword\">setlocal</span> ft=markdown<span class=\"hljs-symbol\">&lt;cr&gt;</span>\n</code></pre>\n<p>So I can hit <code>&lt;Leader&gt;lp</code> (literate Python) to get to Python mode, and\n<code>&lt;Leader&gt;md</code> to get to Markdown. It works decently well!</p>\n<p>I also added a couple of super handy shell aliases. Since I'm basically\nwriting the Markdown portion of the project for Github I want to really\nfrequently check how things are rendering. This alias is handy:</p>\n<pre><code class=\"language-zsh\"><span class=\"hljs-built_in\">alias</span> litpush=<span class=\"hljs-string\">'Pweave -f pandoc *.mdw &amp;&amp; git commit -a &amp;&amp; git push origin master'</span>\n</code></pre>\n<p>This will weave (produce clean markdown) any <code>.mdw</code> files in the\ndirectory, commit any changes (for previously committed files), and push\nthe commit to Github. Nice!</p>\n<h2>Limitations</h2>\n<p>Where you can split up the source code in your main file is somewhat\nlimited. I discovered, for instance, that there isn't a good way to have\ndocumentation interleaved with a class definition. If you\nhave just the <code>__init__</code> method above the documentation, and another\nmethod on that class below, you'll get an 'unexpected indentation' error\nwhen you try to do <code>Pweave</code>. This is irritating, especially since\n<code>Ptangle</code> works just fine in this situation.</p>\n<p>Anyway, small gripes aside, it's been fun! Maybe try it out sometime?</p>\n","date":"2015-08-11T22:03:01.000Z"},"a_post-rc_update":{"title":"A post-RC update","body":"<p>Well, my batch at RC ended a little over two weeks ago. It was a really\ngreat experience, filled with a lot of wonderful people. I wrote a whole\nmess of code, and advanced a lot as a programmer during my summer in NYC.</p>\n<p>I was worried, however, that after leaving RC I wouldn't keep the momentum\nI had built, or that I wouldn't keep writing code for fun. Since tomorrow\nI'll be starting my first programming job (woo job!) and my free\nprogramming time will, accordingly, probaby drop off a bit, I thought\nI would list off the things I've done since leaving RC.</p>\n<p>This is mostly to make me feel like I'm getting more out of my time.\nAnyway!</p>\n<ol>\n<li><a href=\"https://github.com/aliceriot/crypto_primitives/tree/master/diffie-hellman\">Diffie-Hellman\nexample</a>:\nI wrote a little Python library to calculate a DH shared secret, and then\nwrote a little program that uses it to simulate Alice encrypting a message\n(using repeating-key XOR) and then sending it to Bob, who can decrypt it\nwith their shared secret.</li>\n</ol>\n<p>It's not intended to be secure in any way, but rather used as a little\ndemonstration to explain better how DH works.</p>\n<p>Diffie-Hellman is super super cool! And it's actually very easy to\nunderstand how it works (or, at least, it's easy to understand how it is\nguaranteed to produce the same secret on both ends).</p>\n<ol start=\"2\">\n<li><p>My new job is at a Ruby shop, so I've been reading a book known as the\n<a href=\"https://pragprog.com/book/ruby/programming-ruby\">pickaxe</a>, which is\ninteresting so far. I'm excited to get more in depth with Ruby. So far\nit's <em>close enough</em> to Python that I don't feel too weird, but it has some\nnifty or strange things (like <code>do</code> blocks, methods like <code>5.upto(10)</code>,\ninstance attribute access control, the <code>end</code> keyword) which are keeping it\ninteresting.</p></li>\n<li><p><a href=\"https://github.com/aliceriot/CryptoPals\">Matasano challenges</a>: today\nI finished the first set! Hooray! The first set is exercises 1-8.\nI originally started doing these in C, and for exercise 4 I switched to\nPython (which was so much easier omg).</p></li>\n</ol>\n<p>I've learned a bunch about dealing with binary data in Python, about\nrepeating-key XOR (an ECB block cipher with a bytearray), about how to\nbreak simple cryptosystems (like repeating-key XOR, which is really the\n<a href=\"https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher\">Vigenere cipher</a>),\nand a bit about AES.</p>\n<p>Exercise 06 was probably the most challenging. We get a file which has\nbeen encrypted using repeating-key XOR, but we do not know how long the\nkeysize is. So we have to 1) figure out the keysize and 2) figure out each\nbyte of the key. It was a fun challenge! This one was a lot of fun, and\nI plan to write up my solution as a separate blog post soon-ish.</p>\n<p>Exercise 07 and 08 gave a taste of the next section, which is about block\nciphers. Hopefully I'll have some time to start working through set 02\nnext week.</p>\n<p>That's about it! It's been great to be back in Boston, and while I'm\nexcited to be working I wish I could just write silly programs to mess\naround with crypto all day. Someday, grad school...</p>\n","date":"2015-08-30T20:16:56.000Z"},"mata_exercise_06":{"title":"Matasano Exercise 06","body":"<h1>Matasano exercise 06</h1>\n<p>This is a literate Python explanation of <a href=\"https://github.com/aliceriot/CryptoPals/tree/master/set1/Python/ex06\">my\nsolution</a>\nto the <a href=\"http://cryptopals.com/sets/1/challenges/6/\">sixth</a> Matasano\nproblem. It may look better on <a href=\"https://github.com/aliceriot/CryptoPals/blob/master/set1/Python/ex06/literate_python/matasano_06.md\">github</a> than it does here, which brings me great shame.</p>\n<p>Needless to say, if you are doing the challenges yourself, you should not\nread this! It will make it far too easy. If, however, you've been stuck on\nthis question, you may find this helpful!</p>\n<h2>The Problem</h2>\n<p>Here we have a message which has been encrypted with repeating-key XOR\n(which is, more or less, the Vigenere's cipher). It's encoded in Base64,\nand we want to figure out how to read it! Great! How do?</p>\n<p>Well, actually the Matasano folks give us a really nice explanation of how to\nproceed. Basically I'm going to take their overview, modify it somewhat, and\nintersperse the code that performs that step. Cool!</p>\n<p>First off, we'll read in the ciphertext:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> base64 <span class=\"hljs-keyword\">import</span> b64decode\n\n<span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"./ex06.txt\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    ciphertext = b64decode(<span class=\"hljs-string\">''</span>.join([l.strip() <span class=\"hljs-keyword\">for</span> l <span class=\"hljs-keyword\">in</span> f.readlines()]))\n</code></pre>\n<p>We read in the file line-by-line, strip off newlines, and join all the\ncleaned lines together. The <code>b64decode</code> function returns a <code>bytes</code> object.</p>\n<h2>KEYSIZE</h2>\n<p>Keysize is the length of the key. Since this is the repeating-key XOR\ncryptosystem this is basically the number of bytes in a key. A message is\nencrypted by XORing character <code>i</code> with <code>key[i % keysize]</code>, so for a keysize of\n4 the fourth, eighth, twelfth, and so on characters will all be XORed with\nthe fourth byte of the key (and same for the first, fifth, ninth, etc.\nwith the first byte of the key).</p>\n<p>Matasano lets us know that we only have to worry about keysize ranging between\n2 and 40 (they're so helpful with the hints sometimes!). So we'll need some way\nto figure out the most appropriate keysize - once we know that we can get to\nthe business of figuring out the key.</p>\n<h2>Hamming Distance</h2>\n<p>Hamming distance is a metric for <em>string difference</em>, and in this case we want\nto essentially count the number of bits where two strings (C-style bytestrings)\nare different.</p>\n<p>Here's a little function to do that:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">distance</span><span class=\"hljs-params\">(s1, s2)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> sum(bin(x^y).count(<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-keyword\">for</span> x,y <span class=\"hljs-keyword\">in</span> zip(s1,s2))\n</code></pre>\n<p>Ok, so we zip string one and string two together, then we XOR them (which\nwill leave ones wherever they differ), use <code>bin</code> to get a string\nrepresentation of that, and then count the number of ones. If we sum this\nacross <code>zip(s1,s2)</code> we get our difference. Nice!</p>\n<h2>Finding the right KEYSIZE</h2>\n<p>OK, now that we've defined the Hamming distance, we can use that to find\nan appropriate keysize with which to move forward. Basically, we expect\nthat if we have the right keysize, then if we chunk the ciphertext into\nblocks of <code>keysize</code> length, we should see a lower Hamming distance between\nthose chunks than we would between chunks of a randomly selected length.\nThis is because if we have <code>keysize</code> correct, then those chunks will have\nbeen XORed against the same block, and so will have that in common. Great!</p>\n<p>This is a class named <code>Keysieve</code> which does this for us:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> statistics <span class=\"hljs-keyword\">import</span> mean\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Keysieve</span><span class=\"hljs-params\">(object)</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, ciphertext, minkey, maxkey)</span>:</span>\n        self.scores = []\n        self.keys = range(minkey, maxkey + <span class=\"hljs-number\">1</span>)\n        self.ctext = ciphertext\n        self.sieve()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sieve</span><span class=\"hljs-params\">(self)</span>:</span>\n        <span class=\"hljs-keyword\">for</span> ksize <span class=\"hljs-keyword\">in</span> self.keys:\n            first = self.ctext[:ksize]\n            chunks = [self.ctext[i*ksize:(i+<span class=\"hljs-number\">1</span>)*ksize] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)]\n            scores = [distance(first, i)/ksize <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> chunks]\n            self.scores.append((ksize, mean(scores)))\n        self.scores.sort(key = <span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-number\">1</span>])\n</code></pre>\n<p>The constructor for <code>Keysieve</code> takes a minkey and a maxkey, which are the\nbounds on our keysize search space. We also need to have a ciphertext to\nwork on.</p>\n<p>Lets instantiate a <code>Keysieve</code> object now:</p>\n<pre><code class=\"language-python\">keysieve = Keysieve(ciphertext, <span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">40</span>)\n</code></pre>\n<p>Great! When we instantiate the object the <code>sieve</code> method gets called\nautomatically. This is going to iterate through the possible keysizes and,\nfor each one, calculate the average pairwise Hamming distance between the\nfirst chunk of size <code>keysize</code> and all other chunks. We assume that the\nkeysize that results in the lowest score will be our winner, so then we\ncall the <code>sort</code> method on <code>keysieve.scores</code>.</p>\n<p>Then we can get our putative best keysize by doing:</p>\n<pre><code class=\"language-python\">keysize = keysieve.scores[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n</code></pre>\n<h2>Breaking up the Ciphertext</h2>\n<p>Now that we know the <code>keysize</code> we can get on with solving the problem.\nFirst we want to split the ciphertext up into <code>keysize</code> different blocks,\nwhere each block is composed of the bytes in the ciphertext whose\nremainder modulo <code>keysize</code> is a particular number. So there will be\na block of all those bytes whose index modulo <code>keysize</code> is 0, all those\nwhose index modulo <code>keysize</code> is 1, and so on, up to <code>keysize -1</code>.</p>\n<p>Then we have a block which is constructed from the first byte from every\n<code>keysize</code> chunk, the second byte from every <code>keysize</code> chunk, and so on.\nThen we can take those blocks and, since they've all been XORed with the\nsame byte of the key, we can solve them each independently as if they were\nseparate ciphertexts encrypted with single byte XOR. Great!</p>\n<h3>Making the blocks</h3>\n<p>Here's how we'll make the blocks (naturally, with a class called\n<code>Blocks</code>):</p>\n<pre><code class=\"language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Blocks</span><span class=\"hljs-params\">(object)</span>:</span>\n    <span class=\"hljs-string\">\"\"\"takes ciphertext and best keysizes, makes blocks\"\"\"</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, ciphertext, keysize)</span>:</span>\n        self.ciphertext = ciphertext\n        self.keysize = keysize\n        self.blocks = [[] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(self.keysize)]\n        self.blockify()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">blockify</span><span class=\"hljs-params\">(self)</span>:</span>\n        <span class=\"hljs-keyword\">for</span> tup <span class=\"hljs-keyword\">in</span> enumerate(self.ciphertext):\n            self.blocks[tup[<span class=\"hljs-number\">0</span>] % self.keysize].append(tup[<span class=\"hljs-number\">1</span>])\n        map(bytearray, self.blocks)\n</code></pre>\n<p>Now we can make the blocks! Weee!</p>\n<pre><code class=\"language-python\">blocks = Blocks(ciphertext, keysize)\n</code></pre>\n<p>Cool, we have <code>blocks</code>.</p>\n<h2>Solving the Blocks</h2>\n<p>As we said above, we now have a bunch of blocks, each of which we can\nsolve in the same way we solved single byte XOR. Basically we're going to\nrely on a couple of assumptions about what a <em>correct</em> key will look like.</p>\n<p>First off, we assume that a correct key will, when XORed with the\nciphertext, produce a readable message. Readable messages, in general,\nconsist of ASCII characters like letters, spaces, and so on.</p>\n<p>I tried out a bunch of different scoring schemes for this step, and this\nis what gave me the best result:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singlebyte</span><span class=\"hljs-params\">(object)</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, block)</span>:</span>\n        self.ctext = block\n        self.keys = []\n        self.scorekeys()\n        self.bestkey = max(self.keys, key = <span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-number\">1</span>])\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">scorekeys</span><span class=\"hljs-params\">(self)</span>:</span>\n        common = <span class=\"hljs-string\">'etaoinshrd'</span>\n        <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">256</span>):\n            plain = <span class=\"hljs-string\">''</span>.join(map(<span class=\"hljs-keyword\">lambda</span> c: chr(c^key), self.ctext))\n            spaces = plain.count(<span class=\"hljs-string\">' '</span>)\n            upper = sum(plain.count(c) <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> common.upper())\n            lower = sum(plain.count(c) <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> common)\n            self.keys.append((key, spaces + upper + lower))\n</code></pre>\n<p>So our <code>scorekeys</code> method will score a key by adding the number of\nspaces to the number of upper and lower case examples of the letters\n<code>etaoinshrd</code>.</p>\n<p>Seems random right? I thought so too, but it does work!</p>\n<p>Anyway, to get a key we do this:</p>\n<pre><code class=\"language-python\">key = bytearray()\n<span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> blocks.blocks:\n    temp = Singlebyte(block)\n    key.append(temp.bestkey[<span class=\"hljs-number\">0</span>])\n</code></pre>\n<p>So we iterate through our blocks, solving each one using <code>Singlebyte</code>, and\nappending the best key to a master key. We're almost there now!</p>\n<h2>Decrypting the Ciphertext</h2>\n<p>Now that we have the correct key we want to use it to get the plaintext\nfor our ciphertext. I promise this is the last class definition you need\nto read:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Decrypt</span><span class=\"hljs-params\">(object)</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, ciphertext, key)</span>:</span>\n        self.ctext = ciphertext\n        self.key = key\n        self.plaintext = <span class=\"hljs-string\">''</span>\n        self.decrypt()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">decrypt</span><span class=\"hljs-params\">(self)</span>:</span>\n        temp = []\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> enumerate(self.ctext):\n            temp.append(i[<span class=\"hljs-number\">1</span>] ^ self.key[i[<span class=\"hljs-number\">0</span>] % len(self.key)])\n        self.plaintext = <span class=\"hljs-string\">''</span>.join(map(chr, temp))\n</code></pre>\n<p>So we pass in the ciphertext and the newly minted key. Then we have\na <code>decrypt</code> method which is going to iterate through the ciphertext and\nXOR character <code>i</code> with <code>key[i % keysize]</code>. If all goes well, we will have\na plaintext message waiting for us!</p>\n<p>Here's how we'd find the final answer:</p>\n<pre><code class=\"language-python\">decrypt = Decrypt(ciphertext, key)\n</code></pre>\n<p>Then we could get the plaintext out by doing:</p>\n<pre><code class=\"language-python\">print(<span class=\"hljs-string\">\"The key was: {}\"</span>.format(<span class=\"hljs-string\">''</span>.join(map(chr, key))))\nprint(<span class=\"hljs-string\">\"Plaintext:\"</span>)\nprint(decrypt.plaintext)\n</code></pre>\n<p>but I don't want to spoil <em>everything</em> for you, at least go run this code\nyourself!</p>\n","date":"2015-10-08T02:58:44.000Z"},"open_pull_requests_on_github_from_the_command_line":{"title":"Open pull requests on Github from the command line","body":"<p>I just got a nifty little bit of shell magic working that I wanted to\nshare! Basically it's a set of shell functions that give you a command\n(<code>ghpull</code>) which will open the pull request for your current git branch in\nyour browser. Nifty, right? No more switch to Chrome -&gt; ctrl-l -&gt;\n<a href=\"https://github.com/pulls\">https://github.com/pulls</a> -&gt; click on pr for us!</p>\n<p>First we need to add pull requests (which are actually just remote\nbranches that Github automatically creates) to our remotes. I have an\nalias that lets me quickly add them to any repo:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">alias</span> get_pulls=<span class=\"hljs-string\">'git config --add remote.origin.fetch \"+refs/pull/*/head:refs/remotes/origin/pull/*\"'</span>\n</code></pre>\n<p>Then if you do <code>git fetch origin</code> you'll get the pull request branches\ntoo. Great!</p>\n<p>So now we need to figure out which of the remote PR branches correspond to\nour current feature branch. First we'll write a little function to find\nthe most recent non-fixup commit on our current branch:</p>\n<pre><code class=\"language-zsh\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">origin_exists</span></span> () {\n    [[ <span class=\"hljs-_\">-d</span> .git/refs/remotes/origin ]]\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">current_branch</span></span>  () {\n    git rev-parse --abbrev-ref HEAD\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">last_non_fixup_commit_on_branch</span></span> () {\n    <span class=\"hljs-keyword\">if</span> [[ $(current_branch) != <span class=\"hljs-string\">'master'</span> ]]; <span class=\"hljs-keyword\">then</span>\n        <span class=\"hljs-keyword\">if</span> [[ origin_exists ]]; <span class=\"hljs-keyword\">then</span>\n            git <span class=\"hljs-built_in\">log</span> $(current_branch) --not origin/master --format=oneline | ag -v fixup! | head -n 1 | sed <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">'s/\\s.*$//'</span>\n        <span class=\"hljs-keyword\">else</span>\n            git <span class=\"hljs-built_in\">log</span> $(current_branch) --not master --format=oneline | ag -v fixup! | head -n 1 | sed <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">'s/\\s.*$//'</span>\n        <span class=\"hljs-keyword\">fi</span>\n    <span class=\"hljs-keyword\">else</span>\n        git <span class=\"hljs-built_in\">log</span> --format=%H | head -n 1\n    <span class=\"hljs-keyword\">fi</span>\n}\n</code></pre>\n<p>Whew! That's kind of a lot, but it's really not that bad. First we check\nto make sure we're not on master, then if we have a remote repo called\n<code>origin</code> we use <code>git log</code> to find commits on our current branch which\naren't found on <code>origin/master</code>. We format the commit info on one line,\nand use <code>ag</code> (<code>grep</code> would be fine too!) to exclude lines with <code>fixup!</code> in\nthe commit message. Then we get the top commit, and use <code>sed</code> to slice out\nthe SHA1 hash. Nice! Then when we run this function we'll get a full 40\ncharacter hash, which we can use to do whatever we want.</p>\n<p>In this case, we can use this to find which branches have this commit in\nthem. This looks like:</p>\n<pre><code class=\"language-zsh\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">pull_request_number</span></span>() {\n    git branch --remotes --contains $(last_non_fixup_commit_on_branch) | ag pull | sed <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">'s/^.*\\///'</span>\n}\n</code></pre>\n<p>We pass the <code>--remotes</code> flag to consider remote branches (which we've\nnever checked out locally) and then we just get the list of all such\nbranches which contain our commit (by doing <code>--contains</code>). Nifty! This\nwill give us something that looks like this:</p>\n<pre><code class=\"language-zsh\">origin/my-feature-branch <span class=\"hljs-comment\"># the actual feature branch</span>\norigin/pull/324          <span class=\"hljs-comment\"># the branch for the pull request</span>\n</code></pre>\n<p>Great! We're getting close now. We just need to pull out the number (324)\nfrom that output. So we pipe the list of branches into <code>ag</code> (to get only\nbranches with <code>pull</code> in them) and then use <code>sed</code> again to pull out just\nthe number. Awesome! Sometimes unix is fun.</p>\n<p>Anyway, now we just need to use that number to construct the url for the\npull request on Github correctly. First a helper function:</p>\n<pre><code class=\"language-zsh\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">github_repo_location</span></span> () {\n    git remote -v | ag origin | head -n 1 | sed <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">'s/^.*://'</span> | sed <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">'s/\\..*//'</span>\n}\n</code></pre>\n<p>This uses the <code>-v</code> flag to get a verbose list of our remote repos, which\nwill look something like this:</p>\n<p><img src=\"/images/verbose_git_remote.png\" alt=\"git remotes\"></p>\n<p>Nice, so now we just need to slice off the first and last parts of those\nlines. We grab the first one with <code>origin</code> in it and again use <code>sed</code> twice\nto slice off the parts we won't use in the URL.</p>\n<p>Then we can finally write this:</p>\n<pre><code class=\"language-zsh\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">ghpull</span></span> () {\n    git fetch origin\n    xdg-open <span class=\"hljs-string\">\"https://github.com/`github_repo_location`/pull/`pull_request_number`\"</span>\n}\n</code></pre>\n<p>Wow so cool! Now when you're on a feature branch you can just mash\n<code>ghpull</code> to open the pull request for it on your remote repo!\nUnfortunately this does get a little slow on big repos (the step where we\nfind branches containing our commit of interest gets slow). If you're on\na Mac you should be able to just replace <code>xdg-open</code> with <code>open</code>.</p>\n<p>Disclaimer: I'm bad at shell stuff, it's not my fault if you blow\nsomething up.</p>\n","date":"2016-02-25T22:00:39.000Z"},"floating_gnome_terminals_in_i3":{"title":"Floating Gnome Terminals in i3","body":"<h1>Floating Gnome Terminals in i3</h1>\n<p>I've been using i3 for a good long while, and my initial choice for\na terminal emulator was urxvt. I liked that it was simple, configured with\na text file (<code>~/.Xdefaults</code>), and lightweight, although I grew tired of\nthe flaky perl extensions, and missing basic functionality like a key\ncombo to change the font size. So I switched to Gnome Terminal, which I've\nbeen using very happily.</p>\n<p>The one final thing I hadn't yet ported over to the Gnome terminal config\nwas floating terms in i3. With <code>urxvt</code> I had just created a symlink to the\nnormal executable, which would change the title of the window. Then it was\na simple matter of a key combo to execute the symlink and a floating rule\nin <code>i3</code> to get a key combo to open a terminal floating on top of whatever\nother windows I have open (really useful for running one or two commands).\nI tried this same approach with <code>gnome-terminal</code>, but it turns out to be\na little more insistent on what its window title should look like.</p>\n<p>Anyway, I finally figured out a nice (well, sorta) way to get this\nfunctionality in <code>i3</code> with <code>gnome-terminal</code>! Here's how to do it.</p>\n<h2>Setting windows titles with the shell</h2>\n<p>It turns out that, as with a lot of terminal related stuff, setting the\nwindow title for a lot of different X windows terminal emulators is just\na matter of sending the right escaped key sequence. I found somewhere\nonline the following function:</p>\n<pre><code class=\"language-zsh\"><span class=\"hljs-keyword\">function</span> () title {\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-_\">-ne</span> <span class=\"hljs-string\">\"\\033]0;<span class=\"hljs-variable\">$1</span>\\007\"</span>\n}\n</code></pre>\n<p>then if we do something like <code>title Foobar</code> we should get something like\nthe following:</p>\n<p><img src=\"/images/foobar_window_title.png\" alt=\"window title\"></p>\n<p>so we've changed the window's title to Foobar, and we can see it listed if\nwe list the windows on the system with <code>wmctrl -l</code>. Nice!</p>\n<h2>Making windows float!</h2>\n<p>In <code>i3</code> it's very simple to make windows float. We just add this line to\nthe <code>i3</code> configuration file (<code>~/.i3/config</code>):</p>\n<pre><code><span class=\"hljs-keyword\">for</span>_window [title=<span class=\"hljs-string\">\"Float\"</span>] floating <span class=\"hljs-built_in\">enable</span>\n</code></pre>\n<p>Great - now any window with the title <code>Float</code> will float!</p>\n<h2>Running the title function on startup</h2>\n<p>Great, so now we can set the title for a gnome terminal to whatever we\nwant. All we need to figure out now is how to get that function to run on\nstartup in gnome-terminal.</p>\n<p>Fair warning: I'm a shell noob. I ran into a bunch of character escaping\n/ quoting issues, and this how I solved it :P</p>\n<p>First, another shell function:</p>\n<pre><code class=\"language-zsh\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">floating_gnome_term</span></span> () {\n    gnome-terminal <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"zsh -c '<span class=\"hljs-variable\">$(declare -f title)</span>; title Float; zsh'\"</span>\n}\n</code></pre>\n<p>the <code>-e</code> option accepts a command that will be run on startup.</p>\n<p>Then we need a shell script (in our <code>$PATH</code> somehow):</p>\n<pre><code class=\"language-zsh\"><span class=\"hljs-meta\">#!/bin/zsh\n</span>\n<span class=\"hljs-built_in\">source</span> ~/.zshrc\nfloating_gnome_term\n</code></pre>\n<p>this just sources all of our <code>zsh</code> stuff and then runs the function above.\nNow the final step is just adding a keybind to run this shell script in\ni3:</p>\n<pre><code><span class=\"hljs-keyword\">bindsym </span>$mod+<span class=\"hljs-keyword\">Shift+Return </span>exec floating_gnome_term.<span class=\"hljs-keyword\">sh\n</span></code></pre>\n<p>and that's it! I have <code>$mod+Return</code> bound to a normal, tiling terminal\nwindow, so adding <code>Shift</code> makes sense to me.</p>\n<p>Floating windows everywhere!</p>\n<p><img src=\"/images/so_much_floating.png\" alt=\"floats\"></p>\n","date":"2016-03-03T17:17:12.000Z"}}